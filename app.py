import streamlit as st
import torch
import torch.nn as nn
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from pathlib import Path
import joblib

# –ó–∞–≥—Ä—É–∂–∞–µ–º scaler –∏ –ø–æ—Ä—è–¥–æ–∫ —Ñ–∏—á–µ–π
scaler = joblib.load("models/scaler.joblib")
feature_order = joblib.load("models/features.joblib")


# ======================================================
# 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É (—Ç–∞–∫–∞—è –∂–µ, –∫–∞–∫ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏)
# ======================================================
class TitanicNN(nn.Module):
    def __init__(self, input_dim):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(input_dim, 64),
            nn.BatchNorm1d(64),
            nn.ReLU(),
            nn.Dropout(0.3),

            nn.Linear(64, 32),
            nn.BatchNorm1d(32),
            nn.ReLU(),
            nn.Dropout(0.3),

            nn.Linear(32, 16),
            nn.ReLU(),
            nn.Linear(16, 1),
            nn.Sigmoid()
        )

    def forward(self, x):
        return self.net(x)


# ======================================================
# 2. –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
# ======================================================
# –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ (–≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)
model_path = Path("models/titanic_model.pth")

# —Å–æ–∑–¥–∞—ë–º –º–æ–¥–µ–ª—å –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞
input_dim = 14 - 1  # —Å—Ç–æ–ª—å–∫–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —É –Ω–∞—Å –±–µ–∑ –∫–æ–ª–æ–Ω–∫–∏ Survived
model = TitanicNN(input_dim)
model.load_state_dict(torch.load(model_path, map_location=torch.device("cpu")))
model.eval()

# ======================================================
# 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
# ======================================================
st.set_page_config(page_title="Titanic Survival Predictor", page_icon="üö¢", layout="centered")

st.title("üö¢ –ü—Ä–æ–≤–µ—Ä—å, –≤—ã–∂–∏–ª –±—ã —Ç—ã –Ω–∞ –¢–∏—Ç–∞–Ω–∏–∫–µ")
st.markdown(
    "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –∫–∞–∫–æ–≤–∞ –±—ã–ª–∞ –±—ã –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Å–ø–∞—Å–µ–Ω–∏—è "
    "–Ω–∞ –±–æ—Ä—Ç—É –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –¢–∏—Ç–∞–Ω–∏–∫–∞ üßä"
)
st.divider()

# ======================================================
# 4. –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
# ======================================================

col1, col2 = st.columns(2)

with col1:
    sex = st.selectbox("–ü–æ–ª", options=["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"])
    age = st.slider("–í–æ–∑—Ä–∞—Å—Ç", 0, 80, 30)
    sibsp = st.number_input("–ë—Ä–∞—Ç—å—è/—Å—ë—Å—Ç—Ä—ã –Ω–∞ –±–æ—Ä—Ç—É", 0, 8, 0)
    parch = st.number_input("–†–æ–¥–∏—Ç–µ–ª–∏/–¥–µ—Ç–∏ –Ω–∞ –±–æ—Ä—Ç—É", 0, 6, 0)
    fare = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞ (¬£)", 0.0, 600.0, 30.0, step=1.0)

with col2:
    pclass = st.radio("–ö–ª–∞—Å—Å –∫–∞—é—Ç—ã", options=[1, 2, 3], horizontal=True)
    embarked = st.selectbox("–ü–æ—Ä—Ç –ø–æ—Å–∞–¥–∫–∏", options=["C (–®–µ—Ä–±—É—Ä)", "Q (–ö—É–∏–Ω—Å—Ç–∞—É–Ω)", "S (–°–∞—É—Ç–≥–µ–º–ø—Ç–æ–Ω)"])

st.divider()

# ======================================================
# 5. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∫ –ø–æ–¥–∞—á–µ –≤ –º–æ–¥–µ–ª—å
# ======================================================

# –ü–æ–ª
sex = 1 if sex == "–ñ–µ–Ω—â–∏–Ω–∞" else 0

# –ü–æ—Ä—Ç—ã
embarked_C = 1 if embarked.startswith("C") else 0
embarked_Q = 1 if embarked.startswith("Q") else 0
embarked_S = 1 if embarked.startswith("S") else 0

# –ö–ª–∞—Å—Å—ã
pclass_1 = 1 if pclass == 1 else 0
pclass_2 = 1 if pclass == 2 else 0
pclass_3 = 1 if pclass == 3 else 0

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏—á–∏ (–∫–∞–∫ –≤ –Ω–æ—É—Ç–±—É–∫–µ)
family_size = sibsp + parch + 1
is_alone = 1 if family_size == 1 else 0

# –§–æ—Ä–º–∏—Ä—É–µ–º DataFrame —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
user_data = {
    "Sex": [sex],
    "Age": [age],
    "SibSp": [sibsp],
    "Parch": [parch],
    "Fare": [fare],
    "FamilySize": [family_size],
    "IsAlone": [is_alone],
    "Pclass_1": [pclass_1],
    "Pclass_2": [pclass_2],
    "Pclass_3": [pclass_3],
    "Embarked_C": [embarked_C],
    "Embarked_Q": [embarked_Q],
    "Embarked_S": [embarked_S],
}

user_df = pd.DataFrame(user_data)

# –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å –ø–æ–º–æ—â—å—é —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ scaler
cols_to_scale = ["Age", "Fare", "SibSp", "Parch"]
user_df[cols_to_scale] = scaler.transform(user_df[cols_to_scale])

# –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∫ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
user_df = user_df[feature_order]

# –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Ç–µ–Ω–∑–æ—Ä
X_tensor = torch.tensor(user_df.values, dtype=torch.float32)

# ======================================================
# 6. –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
# ======================================================
if st.button("üßÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∂–∏–≤–∞–Ω–∏—è"):
    with torch.no_grad():
        prob = model(X_tensor).item()
        prob_percent = prob * 100

    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    if prob > 0.75:
        verdict = "üü¢ –í—ã –±—ã **—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã–∂–∏–ª–∏** –≤–º–µ—Å—Ç–µ —Å –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º–∏ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ üëë"
    elif prob > 0.5:
        verdict = "üü° –í–∞—à–∏ —à–∞–Ω—Å—ã 50/50 ‚Äî –≤—Å—ë –∑–∞–≤–∏—Å–µ–ª–æ –±—ã –æ—Ç —É–¥–∞—á–∏ –∏ –º–µ—Å—Ç–∞ –Ω–∞ –∫–æ—Ä–∞–±–ª–µ ‚öñÔ∏è"
    else:
        verdict = "üî¥ –£–≤—ã, –≤—ã **–≤—Ä—è–¥ –ª–∏ –±—ã –≤—ã–∂–∏–ª–∏**... —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–µ —à–ª—é–ø–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üò¢"

    st.subheader(f"üí° –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∂–∏–≤–∞–Ω–∏—è: **{prob_percent:.1f}%**")
    st.markdown(verdict)
